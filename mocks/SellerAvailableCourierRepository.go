// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"
)

// SellerAvailableCourierRepository is an autogenerated mock type for the SellerAvailableCourierRepository type
type SellerAvailableCourierRepository struct {
	mock.Mock
}

// AddSellerAvailableDeliveryMethod provides a mock function with given fields: tx, req, sellerID
func (_m *SellerAvailableCourierRepository) AddSellerAvailableDeliveryMethod(tx *gorm.DB, req *dto.AddDeliveryReq, sellerID uint) (*model.SellerAvailableCourier, error) {
	ret := _m.Called(tx, req, sellerID)

	var r0 *model.SellerAvailableCourier
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.AddDeliveryReq, uint) *model.SellerAvailableCourier); ok {
		r0 = rf(tx, req, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SellerAvailableCourier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.AddDeliveryReq, uint) error); ok {
		r1 = rf(tx, req, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSellerAvailableCourier provides a mock function with given fields: tx, sellerID
func (_m *SellerAvailableCourierRepository) GetAllSellerAvailableCourier(tx *gorm.DB, sellerID uint) ([]*model.SellerAvailableCourier, error) {
	ret := _m.Called(tx, sellerID)

	var r0 []*model.SellerAvailableCourier
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.SellerAvailableCourier); ok {
		r0 = rf(tx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SellerAvailableCourier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSellerAvailableCourierRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSellerAvailableCourierRepository creates a new instance of SellerAvailableCourierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSellerAvailableCourierRepository(t mockConstructorTestingTNewSellerAvailableCourierRepository) *SellerAvailableCourierRepository {
	mock := &SellerAvailableCourierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
