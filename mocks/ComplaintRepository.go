// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ComplaintRepository is an autogenerated mock type for the ComplaintRepository type
type ComplaintRepository struct {
	mock.Mock
}

// CreateComplaint provides a mock function with given fields: tx, orderID, description
func (_m *ComplaintRepository) CreateComplaint(tx *gorm.DB, orderID uint, description string) (*model.Complaint, error) {
	ret := _m.Called(tx, orderID, description)

	var r0 *model.Complaint
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) *model.Complaint); ok {
		r0 = rf(tx, orderID, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Complaint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, string) error); ok {
		r1 = rf(tx, orderID, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewComplaintRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewComplaintRepository creates a new instance of ComplaintRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewComplaintRepository(t mockConstructorTestingTNewComplaintRepository) *ComplaintRepository {
	mock := &ComplaintRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
