// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"
)

// PromotionRepository is an autogenerated mock type for the PromotionRepository type
type PromotionRepository struct {
	mock.Mock
}

// CreatePromotion provides a mock function with given fields: tx, req, sellerID
func (_m *PromotionRepository) CreatePromotion(tx *gorm.DB, req *dto.CreatePromotionReq, sellerID uint) (*model.Promotion, error) {
	ret := _m.Called(tx, req, sellerID)

	var r0 *model.Promotion
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.CreatePromotionReq, uint) *model.Promotion); ok {
		r0 = rf(tx, req, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.CreatePromotionReq, uint) error); ok {
		r1 = rf(tx, req, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromotionBySellerID provides a mock function with given fields: tx, sellerID
func (_m *PromotionRepository) GetPromotionBySellerID(tx *gorm.DB, sellerID uint) ([]*model.Promotion, error) {
	ret := _m.Called(tx, sellerID)

	var r0 []*model.Promotion
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.Promotion); ok {
		r0 = rf(tx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromotion provides a mock function with given fields: tx, promoID, updatePromo
func (_m *PromotionRepository) UpdatePromotion(tx *gorm.DB, promoID uint, updatePromo *model.Promotion) (*model.Promotion, error) {
	ret := _m.Called(tx, promoID, updatePromo)

	var r0 *model.Promotion
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.Promotion) *model.Promotion); ok {
		r0 = rf(tx, promoID, updatePromo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.Promotion) error); ok {
		r1 = rf(tx, promoID, updatePromo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewDetailPromotionByID provides a mock function with given fields: tx, id
func (_m *PromotionRepository) ViewDetailPromotionByID(tx *gorm.DB, id uint) (*model.Promotion, error) {
	ret := _m.Called(tx, id)

	var r0 *model.Promotion
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Promotion); ok {
		r0 = rf(tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Promotion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPromotionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromotionRepository creates a new instance of PromotionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromotionRepository(t mockConstructorTestingTNewPromotionRepository) *PromotionRepository {
	mock := &PromotionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
