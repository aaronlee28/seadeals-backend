// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// SellerAvailableCourService is an autogenerated mock type for the SellerAvailableCourService type
type SellerAvailableCourService struct {
	mock.Mock
}

// CreateOrUpdateCourier provides a mock function with given fields: req, userID
func (_m *SellerAvailableCourService) CreateOrUpdateCourier(req *dto.AddDeliveryReq, userID uint) (*model.SellerAvailableCourier, error) {
	ret := _m.Called(req, userID)

	var r0 *model.SellerAvailableCourier
	if rf, ok := ret.Get(0).(func(*dto.AddDeliveryReq, uint) *model.SellerAvailableCourier); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SellerAvailableCourier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.AddDeliveryReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableCourierForBuyer provides a mock function with given fields: sellerID
func (_m *SellerAvailableCourService) GetAvailableCourierForBuyer(sellerID uint) ([]*model.SellerAvailableCourier, error) {
	ret := _m.Called(sellerID)

	var r0 []*model.SellerAvailableCourier
	if rf, ok := ret.Get(0).(func(uint) []*model.SellerAvailableCourier); ok {
		r0 = rf(sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SellerAvailableCourier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableCourierForSeller provides a mock function with given fields: userID
func (_m *SellerAvailableCourService) GetAvailableCourierForSeller(userID uint) ([]*model.SellerAvailableCourier, error) {
	ret := _m.Called(userID)

	var r0 []*model.SellerAvailableCourier
	if rf, ok := ret.Get(0).(func(uint) []*model.SellerAvailableCourier); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SellerAvailableCourier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSellerAvailableCourService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSellerAvailableCourService creates a new instance of SellerAvailableCourService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSellerAvailableCourService(t mockConstructorTestingTNewSellerAvailableCourService) *SellerAvailableCourService {
	mock := &SellerAvailableCourService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
