// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ComplaintPhotoRepository is an autogenerated mock type for the ComplaintPhotoRepository type
type ComplaintPhotoRepository struct {
	mock.Mock
}

// CreateComplaintPhotos provides a mock function with given fields: tx, photos
func (_m *ComplaintPhotoRepository) CreateComplaintPhotos(tx *gorm.DB, photos []*model.ComplaintPhoto) ([]*model.ComplaintPhoto, error) {
	ret := _m.Called(tx, photos)

	var r0 []*model.ComplaintPhoto
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.ComplaintPhoto) []*model.ComplaintPhoto); ok {
		r0 = rf(tx, photos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ComplaintPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.ComplaintPhoto) error); ok {
		r1 = rf(tx, photos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewComplaintPhotoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewComplaintPhotoRepository creates a new instance of ComplaintPhotoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewComplaintPhotoRepository(t mockConstructorTestingTNewComplaintPhotoRepository) *ComplaintPhotoRepository {
	mock := &ComplaintPhotoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
