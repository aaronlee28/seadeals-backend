// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// CourierRepository is an autogenerated mock type for the CourierRepository type
type CourierRepository struct {
	mock.Mock
}

// GetAllCouriers provides a mock function with given fields: tx
func (_m *CourierRepository) GetAllCouriers(tx *gorm.DB) ([]*model.Courier, error) {
	ret := _m.Called(tx)

	var r0 []*model.Courier
	if rf, ok := ret.Get(0).(func(*gorm.DB) []*model.Courier); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Courier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierDetailByID provides a mock function with given fields: tx, courierID
func (_m *CourierRepository) GetCourierDetailByID(tx *gorm.DB, courierID uint) (*model.Courier, error) {
	ret := _m.Called(tx, courierID)

	var r0 *model.Courier
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Courier); ok {
		r0 = rf(tx, courierID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Courier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, courierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCourierRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCourierRepository creates a new instance of CourierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCourierRepository(t mockConstructorTestingTNewCourierRepository) *CourierRepository {
	mock := &CourierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
