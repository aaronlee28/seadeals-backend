// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ChangeUserDetailsLessPassword provides a mock function with given fields: userID, req
func (_m *UserService) ChangeUserDetailsLessPassword(userID uint, req *dto.ChangeUserDetails) (*model.User, error) {
	ret := _m.Called(userID, req)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(uint, *dto.ChangeUserDetails) *model.User); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.ChangeUserDetails) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeUserPassword provides a mock function with given fields: userID, req
func (_m *UserService) ChangeUserPassword(userID uint, req *dto.ChangePasswordReq) error {
	ret := _m.Called(userID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *dto.ChangePasswordReq) error); ok {
		r0 = rf(userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckGoogleAccount provides a mock function with given fields: email
func (_m *UserService) CheckGoogleAccount(email string) (*model.User, error) {
	ret := _m.Called(email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: req
func (_m *UserService) Register(req *dto.RegisterRequest) (*dto.RegisterResponse, *gorm.DB, error) {
	ret := _m.Called(req)

	var r0 *dto.RegisterResponse
	if rf, ok := ret.Get(0).(func(*dto.RegisterRequest) *dto.RegisterResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RegisterResponse)
		}
	}

	var r1 *gorm.DB
	if rf, ok := ret.Get(1).(func(*dto.RegisterRequest) *gorm.DB); ok {
		r1 = rf(req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gorm.DB)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dto.RegisterRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RegisterAsSeller provides a mock function with given fields: req, userID
func (_m *UserService) RegisterAsSeller(req *dto.RegisterAsSellerReq, userID uint) (*model.Seller, string, error) {
	ret := _m.Called(req, userID)

	var r0 *model.Seller
	if rf, ok := ret.Get(0).(func(*dto.RegisterAsSellerReq, uint) *model.Seller); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Seller)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(*dto.RegisterAsSellerReq, uint) string); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dto.RegisterAsSellerReq, uint) error); ok {
		r2 = rf(req, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserDetails provides a mock function with given fields: userID
func (_m *UserService) UserDetails(userID uint) (*dto.UserDetailsRes, error) {
	ret := _m.Called(userID)

	var r0 *dto.UserDetailsRes
	if rf, ok := ret.Get(0).(func(uint) *dto.UserDetailsRes); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserDetailsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
