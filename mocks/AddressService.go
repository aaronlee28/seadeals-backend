// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// AddressService is an autogenerated mock type for the AddressService type
type AddressService struct {
	mock.Mock
}

// ChangeMainAddress provides a mock function with given fields: ID, userID
func (_m *AddressService) ChangeMainAddress(ID uint, userID uint) (*dto.GetAddressRes, error) {
	ret := _m.Called(ID, userID)

	var r0 *dto.GetAddressRes
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.GetAddressRes); ok {
		r0 = rf(ID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetAddressRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(ID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAddress provides a mock function with given fields: req, userID
func (_m *AddressService) CreateAddress(req *dto.CreateAddressReq, userID uint) (*model.Address, error) {
	ret := _m.Called(req, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*dto.CreateAddressReq, uint) *model.Address); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateAddressReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressesByUserID provides a mock function with given fields: userID
func (_m *AddressService) GetAddressesByUserID(userID uint) ([]*dto.GetAddressRes, error) {
	ret := _m.Called(userID)

	var r0 []*dto.GetAddressRes
	if rf, ok := ret.Get(0).(func(uint) []*dto.GetAddressRes); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.GetAddressRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMainAddress provides a mock function with given fields: userID
func (_m *AddressService) GetUserMainAddress(userID uint) (*dto.GetAddressRes, error) {
	ret := _m.Called(userID)

	var r0 *dto.GetAddressRes
	if rf, ok := ret.Get(0).(func(uint) *dto.GetAddressRes); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetAddressRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddress provides a mock function with given fields: req, userID
func (_m *AddressService) UpdateAddress(req *dto.UpdateAddressReq, userID uint) (*model.Address, error) {
	ret := _m.Called(req, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*dto.UpdateAddressReq, uint) *model.Address); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UpdateAddressReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddressService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressService creates a new instance of AddressService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressService(t mockConstructorTestingTNewAddressService) *AddressService {
	mock := &AddressService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
