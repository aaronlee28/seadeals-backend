// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// SellerRepository is an autogenerated mock type for the SellerRepository type
type SellerRepository struct {
	mock.Mock
}

// FindSellerByID provides a mock function with given fields: tx, sellerID
func (_m *SellerRepository) FindSellerByID(tx *gorm.DB, sellerID uint) (*model.Seller, error) {
	ret := _m.Called(tx, sellerID)

	var r0 *model.Seller
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Seller); ok {
		r0 = rf(tx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSellerByUserID provides a mock function with given fields: tx, userID
func (_m *SellerRepository) FindSellerByUserID(tx *gorm.DB, userID uint) (*model.Seller, error) {
	ret := _m.Called(tx, userID)

	var r0 *model.Seller
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Seller); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSellerDetailByID provides a mock function with given fields: tx, sellerID, userID
func (_m *SellerRepository) FindSellerDetailByID(tx *gorm.DB, sellerID uint, userID uint) (*model.Seller, error) {
	ret := _m.Called(tx, sellerID, userID)

	var r0 *model.Seller
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Seller); ok {
		r0 = rf(tx, sellerID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, sellerID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerPrintSettings provides a mock function with given fields: tx, userID
func (_m *SellerRepository) GetSellerPrintSettings(tx *gorm.DB, userID uint) (*model.Seller, error) {
	ret := _m.Called(tx, userID)

	var r0 *model.Seller
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Seller); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSellerPrintSettings provides a mock function with given fields: tx, sellerID, allowPrint
func (_m *SellerRepository) UpdateSellerPrintSettings(tx *gorm.DB, sellerID uint, allowPrint bool) (*model.Seller, error) {
	ret := _m.Called(tx, sellerID, allowPrint)

	var r0 *model.Seller
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, bool) *model.Seller); ok {
		r0 = rf(tx, sellerID, allowPrint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, bool) error); ok {
		r1 = rf(tx, sellerID, allowPrint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSellerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSellerRepository creates a new instance of SellerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSellerRepository(t mockConstructorTestingTNewSellerRepository) *SellerRepository {
	mock := &SellerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
