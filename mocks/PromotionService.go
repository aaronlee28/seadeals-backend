// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// PromotionService is an autogenerated mock type for the PromotionService type
type PromotionService struct {
	mock.Mock
}

// CreatePromotion provides a mock function with given fields: id, req
func (_m *PromotionService) CreatePromotion(id uint, req *dto.CreatePromotionArrayReq) ([]*dto.CreatePromotionRes, error) {
	ret := _m.Called(id, req)

	var r0 []*dto.CreatePromotionRes
	if rf, ok := ret.Get(0).(func(uint, *dto.CreatePromotionArrayReq) []*dto.CreatePromotionRes); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.CreatePromotionRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.CreatePromotionArrayReq) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromotionByUserID provides a mock function with given fields: id
func (_m *PromotionService) GetPromotionByUserID(id uint) ([]*dto.GetPromotionRes, error) {
	ret := _m.Called(id)

	var r0 []*dto.GetPromotionRes
	if rf, ok := ret.Get(0).(func(uint) []*dto.GetPromotionRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.GetPromotionRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromotion provides a mock function with given fields: req, userID
func (_m *PromotionService) UpdatePromotion(req *dto.PatchPromotionArrayReq, userID uint) ([]*dto.PatchPromotionRes, error) {
	ret := _m.Called(req, userID)

	var r0 []*dto.PatchPromotionRes
	if rf, ok := ret.Get(0).(func(*dto.PatchPromotionArrayReq, uint) []*dto.PatchPromotionRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.PatchPromotionRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PatchPromotionArrayReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewDetailPromotionByID provides a mock function with given fields: id
func (_m *PromotionService) ViewDetailPromotionByID(id uint) (*dto.GetPromotionRes, error) {
	ret := _m.Called(id)

	var r0 *dto.GetPromotionRes
	if rf, ok := ret.Get(0).(func(uint) *dto.GetPromotionRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetPromotionRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPromotionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromotionService creates a new instance of PromotionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromotionService(t mockConstructorTestingTNewPromotionService) *PromotionService {
	mock := &PromotionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
