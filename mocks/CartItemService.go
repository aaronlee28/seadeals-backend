// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"

	repository "seadeals-backend/repository"
)

// CartItemService is an autogenerated mock type for the CartItemService type
type CartItemService struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: userID, req
func (_m *CartItemService) AddToCart(userID uint, req *dto.AddToCartReq) (*model.CartItem, error) {
	ret := _m.Called(userID, req)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(uint, *dto.AddToCartReq) *model.CartItem); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.AddToCartReq) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartItem provides a mock function with given fields: orderItemID, userID
func (_m *CartItemService) DeleteCartItem(orderItemID uint, userID uint) (*model.CartItem, error) {
	ret := _m.Called(orderItemID, userID)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(uint, uint) *model.CartItem); ok {
		r0 = rf(orderItemID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(orderItemID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItems provides a mock function with given fields: query, userID
func (_m *CartItemService) GetCartItems(query *repository.Query, userID uint) ([]*dto.CartItemRes, int64, int64, error) {
	ret := _m.Called(query, userID)

	var r0 []*dto.CartItemRes
	if rf, ok := ret.Get(0).(func(*repository.Query, uint) []*dto.CartItemRes); ok {
		r0 = rf(query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.CartItemRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*repository.Query, uint) int64); ok {
		r1 = rf(query, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*repository.Query, uint) int64); ok {
		r2 = rf(query, userID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*repository.Query, uint) error); ok {
		r3 = rf(query, userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateCart provides a mock function with given fields: userID, req
func (_m *CartItemService) UpdateCart(userID uint, req *dto.UpdateCartItemReq) (*model.CartItem, error) {
	ret := _m.Called(userID, req)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(uint, *dto.UpdateCartItemReq) *model.CartItem); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.UpdateCartItemReq) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartItemService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartItemService creates a new instance of CartItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartItemService(t mockConstructorTestingTNewCartItemService) *CartItemService {
	mock := &CartItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
