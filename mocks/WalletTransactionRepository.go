// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"
)

// WalletTransactionRepository is an autogenerated mock type for the WalletTransactionRepository type
type WalletTransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: tx, _a1
func (_m *WalletTransactionRepository) CreateTransaction(tx *gorm.DB, _a1 *model.WalletTransaction) (*model.WalletTransaction, error) {
	ret := _m.Called(tx, _a1)

	var r0 *model.WalletTransaction
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.WalletTransaction) *model.WalletTransaction); ok {
		r0 = rf(tx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WalletTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.WalletTransaction) error); ok {
		r1 = rf(tx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByWalletID provides a mock function with given fields: tx, query, walletID
func (_m *WalletTransactionRepository) GetTransactionsByWalletID(tx *gorm.DB, query *dto.WalletTransactionsQuery, walletID uint) ([]*model.WalletTransaction, int64, int64, error) {
	ret := _m.Called(tx, query, walletID)

	var r0 []*model.WalletTransaction
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.WalletTransactionsQuery, uint) []*model.WalletTransaction); ok {
		r0 = rf(tx, query, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.WalletTransaction)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.WalletTransactionsQuery, uint) int64); ok {
		r1 = rf(tx, query, walletID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, *dto.WalletTransactionsQuery, uint) int64); ok {
		r2 = rf(tx, query, walletID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, *dto.WalletTransactionsQuery, uint) error); ok {
		r3 = rf(tx, query, walletID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewWalletTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletTransactionRepository creates a new instance of WalletTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletTransactionRepository(t mockConstructorTestingTNewWalletTransactionRepository) *WalletTransactionRepository {
	mock := &WalletTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
