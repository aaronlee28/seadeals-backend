// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// DeliveryRepository is an autogenerated mock type for the DeliveryRepository type
type DeliveryRepository struct {
	mock.Mock
}

// CreateDelivery provides a mock function with given fields: tx, delivery
func (_m *DeliveryRepository) CreateDelivery(tx *gorm.DB, delivery *model.Delivery) (*model.Delivery, error) {
	ret := _m.Called(tx, delivery)

	var r0 *model.Delivery
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Delivery) *model.Delivery); ok {
		r0 = rf(tx, delivery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Delivery) error); ok {
		r1 = rf(tx, delivery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAndUpdateOngoingToDelivered provides a mock function with given fields:
func (_m *DeliveryRepository) FindAndUpdateOngoingToDelivered() ([]*model.Delivery, error) {
	ret := _m.Called()

	var r0 []*model.Delivery
	if rf, ok := ret.Get(0).(func() []*model.Delivery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryByOrderID provides a mock function with given fields: tx, orderID
func (_m *DeliveryRepository) GetDeliveryByOrderID(tx *gorm.DB, orderID uint) (*model.Delivery, error) {
	ret := _m.Called(tx, orderID)

	var r0 *model.Delivery
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Delivery); ok {
		r0 = rf(tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeliveryStatus provides a mock function with given fields: tx, deliveryID, status
func (_m *DeliveryRepository) UpdateDeliveryStatus(tx *gorm.DB, deliveryID uint, status string) (*model.Delivery, error) {
	ret := _m.Called(tx, deliveryID, status)

	var r0 *model.Delivery
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) *model.Delivery); ok {
		r0 = rf(tx, deliveryID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, string) error); ok {
		r1 = rf(tx, deliveryID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeliveryStatusByOrderID provides a mock function with given fields: tx, orderID, status
func (_m *DeliveryRepository) UpdateDeliveryStatusByOrderID(tx *gorm.DB, orderID uint, status string) (*model.Delivery, error) {
	ret := _m.Called(tx, orderID, status)

	var r0 *model.Delivery
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) *model.Delivery); ok {
		r0 = rf(tx, orderID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, string) error); ok {
		r1 = rf(tx, orderID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDeliveryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryRepository creates a new instance of DeliveryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryRepository(t mockConstructorTestingTNewDeliveryRepository) *DeliveryRepository {
	mock := &DeliveryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
