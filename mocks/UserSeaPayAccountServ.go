// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// UserSeaPayAccountServ is an autogenerated mock type for the UserSeaPayAccountServ type
type UserSeaPayAccountServ struct {
	mock.Mock
}

// CheckSeaLabsAccountExists provides a mock function with given fields: req, userID
func (_m *UserSeaPayAccountServ) CheckSeaLabsAccountExists(req *dto.CheckSeaLabsPayReq, userID uint) (*dto.CheckSeaLabsPayRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.CheckSeaLabsPayRes
	if rf, ok := ret.Get(0).(func(*dto.CheckSeaLabsPayReq, uint) *dto.CheckSeaLabsPayRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CheckSeaLabsPayRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CheckSeaLabsPayReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeaLabsAccountByUserID provides a mock function with given fields: userID
func (_m *UserSeaPayAccountServ) GetSeaLabsAccountByUserID(userID uint) ([]*model.UserSealabsPayAccount, error) {
	ret := _m.Called(userID)

	var r0 []*model.UserSealabsPayAccount
	if rf, ok := ret.Get(0).(func(uint) []*model.UserSealabsPayAccount); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserSealabsPayAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayWithSeaLabsPay provides a mock function with given fields: userID, req
func (_m *UserSeaPayAccountServ) PayWithSeaLabsPay(userID uint, req *dto.CheckoutCartReq) (string, *model.SeaLabsPayTransactionHolder, error) {
	ret := _m.Called(userID, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, *dto.CheckoutCartReq) string); ok {
		r0 = rf(userID, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *model.SeaLabsPayTransactionHolder
	if rf, ok := ret.Get(1).(func(uint, *dto.CheckoutCartReq) *model.SeaLabsPayTransactionHolder); ok {
		r1 = rf(userID, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.SeaLabsPayTransactionHolder)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, *dto.CheckoutCartReq) error); ok {
		r2 = rf(userID, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PayWithSeaLabsPayCallback provides a mock function with given fields: txnID, status
func (_m *UserSeaPayAccountServ) PayWithSeaLabsPayCallback(txnID uint, status string) (*model.Transaction, error) {
	ret := _m.Called(txnID, status)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(uint, string) *model.Transaction); ok {
		r0 = rf(txnID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(txnID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSeaLabsPayAccount provides a mock function with given fields: req, userID
func (_m *UserSeaPayAccountServ) RegisterSeaLabsPayAccount(req *dto.RegisterSeaLabsPayReq, userID uint) (*dto.RegisterSeaLabsPayRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.RegisterSeaLabsPayRes
	if rf, ok := ret.Get(0).(func(*dto.RegisterSeaLabsPayReq, uint) *dto.RegisterSeaLabsPayRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RegisterSeaLabsPayRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RegisterSeaLabsPayReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUpWithSeaLabsPay provides a mock function with given fields: amount, userID, accountNumber
func (_m *UserSeaPayAccountServ) TopUpWithSeaLabsPay(amount float64, userID uint, accountNumber string) (*model.SeaLabsPayTopUpHolder, string, error) {
	ret := _m.Called(amount, userID, accountNumber)

	var r0 *model.SeaLabsPayTopUpHolder
	if rf, ok := ret.Get(0).(func(float64, uint, string) *model.SeaLabsPayTopUpHolder); ok {
		r0 = rf(amount, userID, accountNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SeaLabsPayTopUpHolder)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(float64, uint, string) string); ok {
		r1 = rf(amount, userID, accountNumber)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(float64, uint, string) error); ok {
		r2 = rf(amount, userID, accountNumber)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TopUpWithSeaLabsPayCallback provides a mock function with given fields: txnID, status
func (_m *UserSeaPayAccountServ) TopUpWithSeaLabsPayCallback(txnID uint, status string) (*model.WalletTransaction, error) {
	ret := _m.Called(txnID, status)

	var r0 *model.WalletTransaction
	if rf, ok := ret.Get(0).(func(uint, string) *model.WalletTransaction); ok {
		r0 = rf(txnID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WalletTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(txnID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSeaLabsAccountToMain provides a mock function with given fields: req, userID
func (_m *UserSeaPayAccountServ) UpdateSeaLabsAccountToMain(req *dto.UpdateSeaLabsPayToMainReq, userID uint) (*model.UserSealabsPayAccount, error) {
	ret := _m.Called(req, userID)

	var r0 *model.UserSealabsPayAccount
	if rf, ok := ret.Get(0).(func(*dto.UpdateSeaLabsPayToMainReq, uint) *model.UserSealabsPayAccount); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSealabsPayAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UpdateSeaLabsPayToMainReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserSeaPayAccountServ interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserSeaPayAccountServ creates a new instance of UserSeaPayAccountServ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserSeaPayAccountServ(t mockConstructorTestingTNewUserSeaPayAccountServ) *UserSeaPayAccountServ {
	mock := &UserSeaPayAccountServ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
