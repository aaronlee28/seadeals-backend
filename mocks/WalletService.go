// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"

	repository "seadeals-backend/repository"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

// ChangeWalletPinByEmail provides a mock function with given fields: userID, req
func (_m *WalletService) ChangeWalletPinByEmail(userID uint, req *dto.ChangePinByEmailReq) (*model.Wallet, error) {
	ret := _m.Called(userID, req)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(uint, *dto.ChangePinByEmailReq) *model.Wallet); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.ChangePinByEmailReq) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletStatus provides a mock function with given fields: userID
func (_m *WalletService) GetWalletStatus(userID uint) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletTransactionsByUserID provides a mock function with given fields: q, userID
func (_m *WalletService) GetWalletTransactionsByUserID(q *dto.WalletTransactionsQuery, userID uint) ([]*model.WalletTransaction, int64, int64, error) {
	ret := _m.Called(q, userID)

	var r0 []*model.WalletTransaction
	if rf, ok := ret.Get(0).(func(*dto.WalletTransactionsQuery, uint) []*model.WalletTransaction); ok {
		r0 = rf(q, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.WalletTransaction)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*dto.WalletTransactionsQuery, uint) int64); ok {
		r1 = rf(q, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*dto.WalletTransactionsQuery, uint) int64); ok {
		r2 = rf(q, userID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*dto.WalletTransactionsQuery, uint) error); ok {
		r3 = rf(q, userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// PaginatedTransactions provides a mock function with given fields: q, userID
func (_m *WalletService) PaginatedTransactions(q *repository.Query, userID uint) (*dto.PaginatedTransactionsRes, error) {
	ret := _m.Called(q, userID)

	var r0 *dto.PaginatedTransactionsRes
	if rf, ok := ret.Get(0).(func(*repository.Query, uint) *dto.PaginatedTransactionsRes); ok {
		r0 = rf(q, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PaginatedTransactionsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*repository.Query, uint) error); ok {
		r1 = rf(q, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayOrderWithWallet provides a mock function with given fields: userID, req
func (_m *WalletService) PayOrderWithWallet(userID uint, req *dto.CheckoutCartReq) (*dto.CheckoutCartRes, error) {
	ret := _m.Called(userID, req)

	var r0 *dto.CheckoutCartRes
	if rf, ok := ret.Get(0).(func(uint, *dto.CheckoutCartReq) *dto.CheckoutCartRes); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CheckoutCartRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.CheckoutCartReq) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestPinChangeWithEmail provides a mock function with given fields: userID
func (_m *WalletService) RequestPinChangeWithEmail(userID uint) (string, string, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(uint) string); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TransactionDetails provides a mock function with given fields: userID, transactionID
func (_m *WalletService) TransactionDetails(userID uint, transactionID uint) (*dto.TransactionDetailsRes, error) {
	ret := _m.Called(userID, transactionID)

	var r0 *dto.TransactionDetailsRes
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.TransactionDetailsRes); ok {
		r0 = rf(userID, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransactionDetailsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserWalletData provides a mock function with given fields: id
func (_m *WalletService) UserWalletData(id uint) (*dto.WalletDataRes, error) {
	ret := _m.Called(id)

	var r0 *dto.WalletDataRes
	if rf, ok := ret.Get(0).(func(uint) *dto.WalletDataRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.WalletDataRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCodeToRequestByEmail provides a mock function with given fields: userID, req
func (_m *WalletService) ValidateCodeToRequestByEmail(userID uint, req *dto.CodeKeyRequestByEmailReq) (string, error) {
	ret := _m.Called(userID, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, *dto.CodeKeyRequestByEmailReq) string); ok {
		r0 = rf(userID, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.CodeKeyRequestByEmailReq) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRequestIsValid provides a mock function with given fields: userID, key
func (_m *WalletService) ValidateRequestIsValid(userID uint, key string) (string, error) {
	ret := _m.Called(userID, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, string) string); ok {
		r0 = rf(userID, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateWalletPin provides a mock function with given fields: user, pin
func (_m *WalletService) ValidateWalletPin(user *dto.UserJWT, pin string) (string, bool, error) {
	ret := _m.Called(user, pin)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dto.UserJWT, string) string); ok {
		r0 = rf(user, pin)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*dto.UserJWT, string) bool); ok {
		r1 = rf(user, pin)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dto.UserJWT, string) error); ok {
		r2 = rf(user, pin)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WalletPin provides a mock function with given fields: userID, pin
func (_m *WalletService) WalletPin(userID uint, pin string) error {
	ret := _m.Called(userID, pin)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(userID, pin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWalletService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletService(t mockConstructorTestingTNewWalletService) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
