// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	repository "seadeals-backend/repository"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// AddToWalletTransaction provides a mock function with given fields: walletID, refundAmount
func (_m *OrderRepository) AddToWalletTransaction(walletID uint, refundAmount float64) {
	_m.Called(walletID, refundAmount)
}

// FindAndUpdateDeliveredOrderToDone provides a mock function with given fields:
func (_m *OrderRepository) FindAndUpdateDeliveredOrderToDone() []*model.Order {
	ret := _m.Called()

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func() []*model.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	return r0
}

// FindAndUpdateWaitingForSellerToRefunded provides a mock function with given fields:
func (_m *OrderRepository) FindAndUpdateWaitingForSellerToRefunded() []*model.Order {
	ret := _m.Called()

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func() []*model.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	return r0
}

// GetOrderByID provides a mock function with given fields: tx, userID, orderID
func (_m *OrderRepository) GetOrderByID(tx *gorm.DB, userID uint, orderID uint) (*model.Order, error) {
	ret := _m.Called(tx, userID, orderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Order); ok {
		r0 = rf(tx, userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBySellerID provides a mock function with given fields: tx, sellerID, query
func (_m *OrderRepository) GetOrderBySellerID(tx *gorm.DB, sellerID uint, query *repository.OrderQuery) ([]*model.Order, int64, int64, error) {
	ret := _m.Called(tx, sellerID, query)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *repository.OrderQuery) []*model.Order); ok {
		r0 = rf(tx, sellerID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *repository.OrderQuery) int64); ok {
		r1 = rf(tx, sellerID, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, uint, *repository.OrderQuery) int64); ok {
		r2 = rf(tx, sellerID, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, uint, *repository.OrderQuery) error); ok {
		r3 = rf(tx, sellerID, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetOrderByUserID provides a mock function with given fields: tx, userID, query
func (_m *OrderRepository) GetOrderByUserID(tx *gorm.DB, userID uint, query *repository.OrderQuery) ([]*model.Order, int64, int64, error) {
	ret := _m.Called(tx, userID, query)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *repository.OrderQuery) []*model.Order); ok {
		r0 = rf(tx, userID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *repository.OrderQuery) int64); ok {
		r1 = rf(tx, userID, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, uint, *repository.OrderQuery) int64); ok {
		r2 = rf(tx, userID, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, uint, *repository.OrderQuery) error); ok {
		r3 = rf(tx, userID, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetOrderDetailByID provides a mock function with given fields: tx, orderID
func (_m *OrderRepository) GetOrderDetailByID(tx *gorm.DB, orderID uint) (*model.Order, error) {
	ret := _m.Called(tx, orderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Order); ok {
		r0 = rf(tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetailForReceipt provides a mock function with given fields: tx, orderID
func (_m *OrderRepository) GetOrderDetailForReceipt(tx *gorm.DB, orderID uint) (*model.Order, error) {
	ret := _m.Called(tx, orderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Order); ok {
		r0 = rf(tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetailForThermal provides a mock function with given fields: tx, orderID
func (_m *OrderRepository) GetOrderDetailForThermal(tx *gorm.DB, orderID uint) (*model.Order, error) {
	ret := _m.Called(tx, orderID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Order); ok {
		r0 = rf(tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItemsByOrderID provides a mock function with given fields: orderID
func (_m *OrderRepository) GetOrderItemsByOrderID(orderID uint) []*model.OrderItem {
	ret := _m.Called(orderID)

	var r0 []*model.OrderItem
	if rf, ok := ret.Get(0).(func(uint) []*model.OrderItem); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	return r0
}

// RefundToWalletByUserID provides a mock function with given fields: userID, refundedAmount
func (_m *OrderRepository) RefundToWalletByUserID(userID uint, refundedAmount float64) *model.Wallet {
	ret := _m.Called(userID, refundedAmount)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(uint, float64) *model.Wallet); ok {
		r0 = rf(userID, refundedAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: tx, orderID, status
func (_m *OrderRepository) UpdateOrderStatus(tx *gorm.DB, orderID uint, status string) (*model.Order, error) {
	ret := _m.Called(tx, orderID, status)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) *model.Order); ok {
		r0 = rf(tx, orderID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, string) error); ok {
		r1 = rf(tx, orderID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatusByTransID provides a mock function with given fields: tx, transactionID, status
func (_m *OrderRepository) UpdateOrderStatusByTransID(tx *gorm.DB, transactionID uint, status string) ([]*model.Order, error) {
	ret := _m.Called(tx, transactionID, status)

	var r0 []*model.Order
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) []*model.Order); ok {
		r0 = rf(tx, transactionID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, string) error); ok {
		r1 = rf(tx, transactionID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStockByProductVariantDetailID provides a mock function with given fields: pvdID, quantity
func (_m *OrderRepository) UpdateStockByProductVariantDetailID(pvdID uint, quantity uint) {
	_m.Called(pvdID, quantity)
}

type mockConstructorTestingTNewOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepository(t mockConstructorTestingTNewOrderRepository) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
