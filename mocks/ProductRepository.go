// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"

	repository "seadeals-backend/repository"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// AddProductSoldCount provides a mock function with given fields: tx, productID, total
func (_m *ProductRepository) AddProductSoldCount(tx *gorm.DB, productID uint, total int) (*model.Product, error) {
	ret := _m.Called(tx, productID, total)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, int) *model.Product); ok {
		r0 = rf(tx, productID, total)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, int) error); ok {
		r1 = rf(tx, productID, total)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: tx, name, categoryID, sellerID, bulk, minQuantity, maxQuantity
func (_m *ProductRepository) CreateProduct(tx *gorm.DB, name string, categoryID uint, sellerID uint, bulk bool, minQuantity uint, maxQuantity uint) (*model.Product, error) {
	ret := _m.Called(tx, name, categoryID, sellerID, bulk, minQuantity, maxQuantity)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uint, uint, bool, uint, uint) *model.Product); ok {
		r0 = rf(tx, name, categoryID, sellerID, bulk, minQuantity, maxQuantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uint, uint, bool, uint, uint) error); ok {
		r1 = rf(tx, name, categoryID, sellerID, bulk, minQuantity, maxQuantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductDetail provides a mock function with given fields: tx, productID, req
func (_m *ProductRepository) CreateProductDetail(tx *gorm.DB, productID uint, req *dto.ProductDetailsReq) (*model.ProductDetail, error) {
	ret := _m.Called(tx, productID, req)

	var r0 *model.ProductDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *dto.ProductDetailsReq) *model.ProductDetail); ok {
		r0 = rf(tx, productID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *dto.ProductDetailsReq) error); ok {
		r1 = rf(tx, productID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductPhoto provides a mock function with given fields: tx, productID, req
func (_m *ProductRepository) CreateProductPhoto(tx *gorm.DB, productID uint, req *dto.ProductPhoto) (*model.ProductPhoto, error) {
	ret := _m.Called(tx, productID, req)

	var r0 *model.ProductPhoto
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *dto.ProductPhoto) *model.ProductPhoto); ok {
		r0 = rf(tx, productID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *dto.ProductPhoto) error); ok {
		r1 = rf(tx, productID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductPhotos provides a mock function with given fields: tx, productID, req
func (_m *ProductRepository) CreateProductPhotos(tx *gorm.DB, productID uint, req *dto.ProductPhotoReq) ([]*model.ProductPhoto, error) {
	ret := _m.Called(tx, productID, req)

	var r0 []*model.ProductPhoto
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *dto.ProductPhotoReq) []*model.ProductPhoto); ok {
		r0 = rf(tx, productID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *dto.ProductPhotoReq) error); ok {
		r1 = rf(tx, productID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductVariant provides a mock function with given fields: tx, name
func (_m *ProductRepository) CreateProductVariant(tx *gorm.DB, name string) (*model.ProductVariant, error) {
	ret := _m.Called(tx, name)

	var r0 *model.ProductVariant
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *model.ProductVariant); ok {
		r0 = rf(tx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductVariantDetail provides a mock function with given fields: tx, productID, variant1ID, variant2, req
func (_m *ProductRepository) CreateProductVariantDetail(tx *gorm.DB, productID uint, variant1ID *uint, variant2 *model.ProductVariant, req *dto.ProductVariantDetail) (*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, productID, variant1ID, variant2, req)

	var r0 *model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *uint, *model.ProductVariant, *dto.ProductVariantDetail) *model.ProductVariantDetail); ok {
		r0 = rf(tx, productID, variant1ID, variant2, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *uint, *model.ProductVariant, *dto.ProductVariantDetail) error); ok {
		r1 = rf(tx, productID, variant1ID, variant2, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductVariantDetailWithModel provides a mock function with given fields: tx, pvd
func (_m *ProductRepository) CreateProductVariantDetailWithModel(tx *gorm.DB, pvd *model.ProductVariantDetail) (*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, pvd)

	var r0 *model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ProductVariantDetail) *model.ProductVariantDetail); ok {
		r0 = rf(tx, pvd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.ProductVariantDetail) error); ok {
		r1 = rf(tx, pvd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVariantWithName provides a mock function with given fields: tx, name
func (_m *ProductRepository) CreateVariantWithName(tx *gorm.DB, name string) (*model.ProductVariant, error) {
	ret := _m.Called(tx, name)

	var r0 *model.ProductVariant
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *model.ProductVariant); ok {
		r0 = rf(tx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNullProductVariantDetailsByID provides a mock function with given fields: tx, ProductID
func (_m *ProductRepository) DeleteNullProductVariantDetailsByID(tx *gorm.DB, ProductID uint) error {
	ret := _m.Called(tx, ProductID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) error); ok {
		r0 = rf(tx, ProductID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: tx, productID
func (_m *ProductRepository) DeleteProduct(tx *gorm.DB, productID uint) (*model.Product, error) {
	ret := _m.Called(tx, productID)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Product); ok {
		r0 = rf(tx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductPhotos provides a mock function with given fields: tx, req
func (_m *ProductRepository) DeleteProductPhotos(tx *gorm.DB, req *dto.DeleteProductPhoto) ([]*model.ProductPhoto, error) {
	ret := _m.Called(tx, req)

	var r0 []*model.ProductPhoto
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.DeleteProductPhoto) []*model.ProductPhoto); ok {
		r0 = rf(tx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.DeleteProductPhoto) error); ok {
		r1 = rf(tx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductVariantDetailsByID provides a mock function with given fields: tx, id
func (_m *ProductRepository) DeleteProductVariantDetailsByID(tx *gorm.DB, id uint) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindProductByID provides a mock function with given fields: tx, productID
func (_m *ProductRepository) FindProductByID(tx *gorm.DB, productID uint) (*model.Product, error) {
	ret := _m.Called(tx, productID)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Product); ok {
		r0 = rf(tx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductBySlug provides a mock function with given fields: tx, slug
func (_m *ProductRepository) FindProductBySlug(tx *gorm.DB, slug string) (*model.Product, error) {
	ret := _m.Called(tx, slug)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *model.Product); ok {
		r0 = rf(tx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductDetailByID provides a mock function with given fields: tx, productID, userID
func (_m *ProductRepository) FindProductDetailByID(tx *gorm.DB, productID uint, userID uint) (*dto.ProductDetailRes, error) {
	ret := _m.Called(tx, productID, userID)

	var r0 *dto.ProductDetailRes
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *dto.ProductDetailRes); ok {
		r0 = rf(tx, productID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductDetailRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, productID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductVariantDetailsByID provides a mock function with given fields: tx, id
func (_m *ProductRepository) FindProductVariantDetailsByID(tx *gorm.DB, id uint) (*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, id)

	var r0 *model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.ProductVariantDetail); ok {
		r0 = rf(tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductVariantDetailsByProductID provides a mock function with given fields: tx, ProductID
func (_m *ProductRepository) FindProductVariantDetailsByProductID(tx *gorm.DB, ProductID uint) ([]*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, ProductID)

	var r0 []*model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.ProductVariantDetail); ok {
		r0 = rf(tx, ProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSimilarProduct provides a mock function with given fields: tx, categoryID, query
func (_m *ProductRepository) FindSimilarProduct(tx *gorm.DB, categoryID uint, query *repository.SearchQuery) ([]*dto.SellerProductsCustomTable, int64, int64, error) {
	ret := _m.Called(tx, categoryID, query)

	var r0 []*dto.SellerProductsCustomTable
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *repository.SearchQuery) []*dto.SellerProductsCustomTable); ok {
		r0 = rf(tx, categoryID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.SellerProductsCustomTable)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *repository.SearchQuery) int64); ok {
		r1 = rf(tx, categoryID, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, uint, *repository.SearchQuery) int64); ok {
		r2 = rf(tx, categoryID, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, uint, *repository.SearchQuery) error); ok {
		r3 = rf(tx, categoryID, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProductCountBySellerID provides a mock function with given fields: tx, sellerID
func (_m *ProductRepository) GetProductCountBySellerID(tx *gorm.DB, sellerID uint) (int64, error) {
	ret := _m.Called(tx, sellerID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) int64); ok {
		r0 = rf(tx, sellerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductDetail provides a mock function with given fields: tx, id
func (_m *ProductRepository) GetProductDetail(tx *gorm.DB, id uint) (*model.Product, error) {
	ret := _m.Called(tx, id)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Product); ok {
		r0 = rf(tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPhotoURL provides a mock function with given fields: tx, productID
func (_m *ProductRepository) GetProductPhotoURL(tx *gorm.DB, productID uint) (string, error) {
	ret := _m.Called(tx, productID)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) string); ok {
		r0 = rf(tx, productID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariantByName provides a mock function with given fields: tx, name
func (_m *ProductRepository) GetVariantByName(tx *gorm.DB, name string) (*model.ProductVariant, error) {
	ret := _m.Called(tx, name)

	var r0 *model.ProductVariant
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *model.ProductVariant); ok {
		r0 = rf(tx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCategory provides a mock function with given fields: tx, productID
func (_m *ProductRepository) SearchCategory(tx *gorm.DB, productID uint) (string, error) {
	ret := _m.Called(tx, productID)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) string); ok {
		r0 = rf(tx, productID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCity provides a mock function with given fields: tx, productID
func (_m *ProductRepository) SearchCity(tx *gorm.DB, productID uint) (string, error) {
	ret := _m.Called(tx, productID)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) string); ok {
		r0 = rf(tx, productID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchImageURL provides a mock function with given fields: tx, productID
func (_m *ProductRepository) SearchImageURL(tx *gorm.DB, productID uint) (string, error) {
	ret := _m.Called(tx, productID)

	var r0 string
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) string); ok {
		r0 = rf(tx, productID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchMinMaxPrice provides a mock function with given fields: tx, productID
func (_m *ProductRepository) SearchMinMaxPrice(tx *gorm.DB, productID uint) (float64, float64, error) {
	ret := _m.Called(tx, productID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) float64); ok {
		r0 = rf(tx, productID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) float64); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gorm.DB, uint) error); ok {
		r2 = rf(tx, productID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchProduct provides a mock function with given fields: tx, q
func (_m *ProductRepository) SearchProduct(tx *gorm.DB, q *repository.SearchQuery) (*[]model.Product, error) {
	ret := _m.Called(tx, q)

	var r0 *[]model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, *repository.SearchQuery) *[]model.Product); ok {
		r0 = rf(tx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *repository.SearchQuery) error); ok {
		r1 = rf(tx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPromoPrice provides a mock function with given fields: tx, productID
func (_m *ProductRepository) SearchPromoPrice(tx *gorm.DB, productID uint) (float64, error) {
	ret := _m.Called(tx, productID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) float64); ok {
		r0 = rf(tx, productID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRating provides a mock function with given fields: tx, productID
func (_m *ProductRepository) SearchRating(tx *gorm.DB, productID uint) ([]int, error) {
	ret := _m.Called(tx, productID)

	var r0 []int
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []int); ok {
		r0 = rf(tx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRecommendProduct provides a mock function with given fields: tx, q
func (_m *ProductRepository) SearchRecommendProduct(tx *gorm.DB, q *repository.SearchQuery) ([]*dto.SellerProductsCustomTable, int64, int64, error) {
	ret := _m.Called(tx, q)

	var r0 []*dto.SellerProductsCustomTable
	if rf, ok := ret.Get(0).(func(*gorm.DB, *repository.SearchQuery) []*dto.SellerProductsCustomTable); ok {
		r0 = rf(tx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.SellerProductsCustomTable)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *repository.SearchQuery) int64); ok {
		r1 = rf(tx, q)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, *repository.SearchQuery) int64); ok {
		r2 = rf(tx, q)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, *repository.SearchQuery) error); ok {
		r3 = rf(tx, q)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateProduct provides a mock function with given fields: tx, productID, p
func (_m *ProductRepository) UpdateProduct(tx *gorm.DB, productID uint, p *model.Product) (*model.Product, error) {
	ret := _m.Called(tx, productID, p)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.Product) *model.Product); ok {
		r0 = rf(tx, productID, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.Product) error); ok {
		r1 = rf(tx, productID, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductDetail provides a mock function with given fields: tx, productID, pd
func (_m *ProductRepository) UpdateProductDetail(tx *gorm.DB, productID uint, pd *model.ProductDetail) (*model.ProductDetail, error) {
	ret := _m.Called(tx, productID, pd)

	var r0 *model.ProductDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.ProductDetail) *model.ProductDetail); ok {
		r0 = rf(tx, productID, pd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.ProductDetail) error); ok {
		r1 = rf(tx, productID, pd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductFavoriteCount provides a mock function with given fields: tx, productID, isFavorite
func (_m *ProductRepository) UpdateProductFavoriteCount(tx *gorm.DB, productID uint, isFavorite bool) (*model.Product, error) {
	ret := _m.Called(tx, productID, isFavorite)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, bool) *model.Product); ok {
		r0 = rf(tx, productID, isFavorite)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, bool) error); ok {
		r1 = rf(tx, productID, isFavorite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductVariantByID provides a mock function with given fields: tx, id, pvd
func (_m *ProductRepository) UpdateProductVariantByID(tx *gorm.DB, id uint, pvd *model.ProductVariant) (*model.ProductVariant, error) {
	ret := _m.Called(tx, id, pvd)

	var r0 *model.ProductVariant
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.ProductVariant) *model.ProductVariant); ok {
		r0 = rf(tx, id, pvd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.ProductVariant) error); ok {
		r1 = rf(tx, id, pvd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductVariantDetailByID provides a mock function with given fields: tx, id, pvd
func (_m *ProductRepository) UpdateProductVariantDetailByID(tx *gorm.DB, id uint, pvd *model.ProductVariantDetail) (*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, id, pvd)

	var r0 *model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.ProductVariantDetail) *model.ProductVariantDetail); ok {
		r0 = rf(tx, id, pvd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.ProductVariantDetail) error); ok {
		r1 = rf(tx, id, pvd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
