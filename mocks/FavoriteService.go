// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// FavoriteService is an autogenerated mock type for the FavoriteService type
type FavoriteService struct {
	mock.Mock
}

// FavoriteToProduct provides a mock function with given fields: userID, productID
func (_m *FavoriteService) FavoriteToProduct(userID uint, productID uint) (*model.Favorite, uint, error) {
	ret := _m.Called(userID, productID)

	var r0 *model.Favorite
	if rf, ok := ret.Get(0).(func(uint, uint) *model.Favorite); ok {
		r0 = rf(userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Favorite)
		}
	}

	var r1 uint
	if rf, ok := ret.Get(1).(func(uint, uint) uint); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Get(1).(uint)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, uint) error); ok {
		r2 = rf(userID, productID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserFavoriteCount provides a mock function with given fields: userID
func (_m *FavoriteService) GetUserFavoriteCount(userID uint) (uint, error) {
	ret := _m.Called(userID)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFavoriteService interface {
	mock.TestingT
	Cleanup(func())
}

// NewFavoriteService creates a new instance of FavoriteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFavoriteService(t mockConstructorTestingTNewFavoriteService) *FavoriteService {
	mock := &FavoriteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
