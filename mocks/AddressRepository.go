// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"
)

// AddressRepository is an autogenerated mock type for the AddressRepository type
type AddressRepository struct {
	mock.Mock
}

// ChangeMainAddress provides a mock function with given fields: tx, ID, userID
func (_m *AddressRepository) ChangeMainAddress(tx *gorm.DB, ID uint, userID uint) (*model.Address, error) {
	ret := _m.Called(tx, ID, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Address); ok {
		r0 = rf(tx, ID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, ID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUserAddress provides a mock function with given fields: tx, addressID, userID
func (_m *AddressRepository) CheckUserAddress(tx *gorm.DB, addressID uint, userID uint) (*model.Address, error) {
	ret := _m.Called(tx, addressID, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Address); ok {
		r0 = rf(tx, addressID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, addressID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAddress provides a mock function with given fields: tx, req, userID
func (_m *AddressRepository) CreateAddress(tx *gorm.DB, req *dto.CreateAddressReq, userID uint) (*model.Address, error) {
	ret := _m.Called(tx, req, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.CreateAddressReq, uint) *model.Address); ok {
		r0 = rf(tx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.CreateAddressReq, uint) error); ok {
		r1 = rf(tx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressesByID provides a mock function with given fields: tx, id, userID
func (_m *AddressRepository) GetAddressesByID(tx *gorm.DB, id uint, userID uint) (*model.Address, error) {
	ret := _m.Called(tx, id, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Address); ok {
		r0 = rf(tx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressesByUserID provides a mock function with given fields: _a0, _a1
func (_m *AddressRepository) GetAddressesByUserID(_a0 *gorm.DB, _a1 uint) ([]*model.Address, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*model.Address
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.Address); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMainAddress provides a mock function with given fields: tx, userID
func (_m *AddressRepository) GetUserMainAddress(tx *gorm.DB, userID uint) (*model.Address, error) {
	ret := _m.Called(tx, userID)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Address); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddress provides a mock function with given fields: _a0, _a1
func (_m *AddressRepository) UpdateAddress(_a0 *gorm.DB, _a1 *model.Address) (*model.Address, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Address) *model.Address); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Address) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddressRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressRepository creates a new instance of AddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressRepository(t mockConstructorTestingTNewAddressRepository) *AddressRepository {
	mock := &AddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
