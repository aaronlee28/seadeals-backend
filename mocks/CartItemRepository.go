// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"

	repository "seadeals-backend/repository"
)

// CartItemRepository is an autogenerated mock type for the CartItemRepository type
type CartItemRepository struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: tx, cartItem
func (_m *CartItemRepository) AddToCart(tx *gorm.DB, cartItem *model.CartItem) (*model.CartItem, error) {
	ret := _m.Called(tx, cartItem)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.CartItem) *model.CartItem); ok {
		r0 = rf(tx, cartItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.CartItem) error); ok {
		r1 = rf(tx, cartItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCartItem provides a mock function with given fields: tx, cartItemID, userID
func (_m *CartItemRepository) DeleteCartItem(tx *gorm.DB, cartItemID uint, userID uint) (*model.CartItem, error) {
	ret := _m.Called(tx, cartItemID, userID)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.CartItem); ok {
		r0 = rf(tx, cartItemID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, cartItemID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartItem provides a mock function with given fields: tx, query, userID
func (_m *CartItemRepository) GetCartItem(tx *gorm.DB, query *repository.Query, userID uint) ([]*model.CartItem, int64, int64, error) {
	ret := _m.Called(tx, query, userID)

	var r0 []*model.CartItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, *repository.Query, uint) []*model.CartItem); ok {
		r0 = rf(tx, query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CartItem)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *repository.Query, uint) int64); ok {
		r1 = rf(tx, query, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, *repository.Query, uint) int64); ok {
		r2 = rf(tx, query, userID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, *repository.Query, uint) error); ok {
		r3 = rf(tx, query, userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateCart provides a mock function with given fields: tx, req, userID
func (_m *CartItemRepository) UpdateCart(tx *gorm.DB, req *dto.UpdateCartItemReq, userID uint) (*model.CartItem, error) {
	ret := _m.Called(tx, req, userID)

	var r0 *model.CartItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.UpdateCartItemReq, uint) *model.CartItem); ok {
		r0 = rf(tx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CartItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.UpdateCartItemReq, uint) error); ok {
		r1 = rf(tx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartItemRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartItemRepository creates a new instance of CartItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartItemRepository(t mockConstructorTestingTNewCartItemRepository) *CartItemRepository {
	mock := &CartItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
