// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ReviewRepository is an autogenerated mock type for the ReviewRepository type
type ReviewRepository struct {
	mock.Mock
}

// CreateReview provides a mock function with given fields: tx, req
func (_m *ReviewRepository) CreateReview(tx *gorm.DB, req *model.Review) (*model.Review, error) {
	ret := _m.Called(tx, req)

	var r0 *model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Review) *model.Review); ok {
		r0 = rf(tx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Review) error); ok {
		r1 = rf(tx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReviewByProductID provides a mock function with given fields: tx, productID, qp
func (_m *ReviewRepository) FindReviewByProductID(tx *gorm.DB, productID uint, qp *model.ReviewQueryParam) ([]*model.Review, error) {
	ret := _m.Called(tx, productID, qp)

	var r0 []*model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.ReviewQueryParam) []*model.Review); ok {
		r0 = rf(tx, productID, qp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.ReviewQueryParam) error); ok {
		r1 = rf(tx, productID, qp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReviewByProductIDAndSellerID provides a mock function with given fields: tx, userID, productID
func (_m *ReviewRepository) FindReviewByProductIDAndSellerID(tx *gorm.DB, userID uint, productID uint) (*model.Review, error) {
	ret := _m.Called(tx, userID, productID)

	var r0 *model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Review); ok {
		r0 = rf(tx, userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReviewByProductIDNoLimit provides a mock function with given fields: tx, productID, qp
func (_m *ReviewRepository) FindReviewByProductIDNoLimit(tx *gorm.DB, productID uint, qp *model.ReviewQueryParam) ([]*model.Review, error) {
	ret := _m.Called(tx, productID, qp)

	var r0 []*model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.ReviewQueryParam) []*model.Review); ok {
		r0 = rf(tx, productID, qp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.ReviewQueryParam) error); ok {
		r1 = rf(tx, productID, qp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReviewByProductIDNoQuery provides a mock function with given fields: tx, productID
func (_m *ReviewRepository) FindReviewByProductIDNoQuery(tx *gorm.DB, productID uint) ([]*model.Review, error) {
	ret := _m.Called(tx, productID)

	var r0 []*model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.Review); ok {
		r0 = rf(tx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReviewsAvgAndCountByProductID provides a mock function with given fields: tx, productID
func (_m *ReviewRepository) GetReviewsAvgAndCountByProductID(tx *gorm.DB, productID uint) (float64, int64, error) {
	ret := _m.Called(tx, productID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) float64); ok {
		r0 = rf(tx, productID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) int64); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gorm.DB, uint) error); ok {
		r2 = rf(tx, productID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReviewsAvgAndCountBySellerID provides a mock function with given fields: tx, sellerID
func (_m *ReviewRepository) GetReviewsAvgAndCountBySellerID(tx *gorm.DB, sellerID uint) (float64, int64, error) {
	ret := _m.Called(tx, sellerID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) float64); ok {
		r0 = rf(tx, sellerID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) int64); ok {
		r1 = rf(tx, sellerID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gorm.DB, uint) error); ok {
		r2 = rf(tx, sellerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateReview provides a mock function with given fields: tx, reviewID, req
func (_m *ReviewRepository) UpdateReview(tx *gorm.DB, reviewID uint, req *model.Review) (*model.Review, error) {
	ret := _m.Called(tx, reviewID, req)

	var r0 *model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.Review) *model.Review); ok {
		r0 = rf(tx, reviewID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.Review) error); ok {
		r1 = rf(tx, reviewID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserReviewHistory provides a mock function with given fields: tx, userID
func (_m *ReviewRepository) UserReviewHistory(tx *gorm.DB, userID uint) ([]*model.Review, error) {
	ret := _m.Called(tx, userID)

	var r0 []*model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.Review); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUserOrderItem provides a mock function with given fields: tx, userID, productID
func (_m *ReviewRepository) ValidateUserOrderItem(tx *gorm.DB, userID uint, productID uint) (*model.OrderItem, error) {
	ret := _m.Called(tx, userID, productID)

	var r0 *model.OrderItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.OrderItem); ok {
		r0 = rf(tx, userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReviewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviewRepository creates a new instance of ReviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviewRepository(t mockConstructorTestingTNewReviewRepository) *ReviewRepository {
	mock := &ReviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
