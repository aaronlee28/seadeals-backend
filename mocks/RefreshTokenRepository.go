// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// RefreshTokenRepository is an autogenerated mock type for the RefreshTokenRepository type
type RefreshTokenRepository struct {
	mock.Mock
}

// CheckIfTokenExist provides a mock function with given fields: tx, token
func (_m *RefreshTokenRepository) CheckIfTokenExist(tx *gorm.DB, token string) (bool, uint, error) {
	ret := _m.Called(tx, token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) bool); ok {
		r0 = rf(tx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 uint
	if rf, ok := ret.Get(1).(func(*gorm.DB, string) uint); ok {
		r1 = rf(tx, token)
	} else {
		r1 = ret.Get(1).(uint)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gorm.DB, string) error); ok {
		r2 = rf(tx, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateRefreshToken provides a mock function with given fields: tx, userID, token
func (_m *RefreshTokenRepository) CreateRefreshToken(tx *gorm.DB, userID uint, token string) error {
	ret := _m.Called(tx, userID, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) error); ok {
		r0 = rf(tx, userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefreshToken provides a mock function with given fields: tx, userID
func (_m *RefreshTokenRepository) DeleteRefreshToken(tx *gorm.DB, userID uint) error {
	ret := _m.Called(tx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) error); ok {
		r0 = rf(tx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRefreshTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRefreshTokenRepository creates a new instance of RefreshTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRefreshTokenRepository(t mockConstructorTestingTNewRefreshTokenRepository) *RefreshTokenRepository {
	mock := &RefreshTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
