// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// FavoriteRepository is an autogenerated mock type for the FavoriteRepository type
type FavoriteRepository struct {
	mock.Mock
}

// FavoriteToProduct provides a mock function with given fields: tx, userID, productID
func (_m *FavoriteRepository) FavoriteToProduct(tx *gorm.DB, userID uint, productID uint) (*model.Favorite, error) {
	ret := _m.Called(tx, userID, productID)

	var r0 *model.Favorite
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Favorite); ok {
		r0 = rf(tx, userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Favorite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFavoriteCount provides a mock function with given fields: tx, userID
func (_m *FavoriteRepository) GetUserFavoriteCount(tx *gorm.DB, userID uint) (uint, error) {
	ret := _m.Called(tx, userID)

	var r0 uint
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) uint); ok {
		r0 = rf(tx, userID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFavoriteRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFavoriteRepository creates a new instance of FavoriteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFavoriteRepository(t mockConstructorTestingTNewFavoriteRepository) *FavoriteRepository {
	mock := &FavoriteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
