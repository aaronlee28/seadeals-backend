// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// AdminRepository is an autogenerated mock type for the AdminRepository type
type AdminRepository struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: tx, req
func (_m *AdminRepository) CreateCategory(tx *gorm.DB, req *model.ProductCategory) (*model.ProductCategory, error) {
	ret := _m.Called(tx, req)

	var r0 *model.ProductCategory
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ProductCategory) *model.ProductCategory); ok {
		r0 = rf(tx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductCategory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.ProductCategory) error); ok {
		r1 = rf(tx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlobalVoucher provides a mock function with given fields: tx, req
func (_m *AdminRepository) CreateGlobalVoucher(tx *gorm.DB, req *model.Voucher) (*model.Voucher, error) {
	ret := _m.Called(tx, req)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Voucher) *model.Voucher); ok {
		r0 = rf(tx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Voucher) error); ok {
		r1 = rf(tx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryByID provides a mock function with given fields: tx, categoryID
func (_m *AdminRepository) GetCategoryByID(tx *gorm.DB, categoryID uint) (*model.ProductCategory, error) {
	ret := _m.Called(tx, categoryID)

	var r0 *model.ProductCategory
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.ProductCategory); ok {
		r0 = rf(tx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductCategory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminRepository creates a new instance of AdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminRepository(t mockConstructorTestingTNewAdminRepository) *AdminRepository {
	mock := &AdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
