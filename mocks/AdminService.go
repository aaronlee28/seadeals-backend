// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: req
func (_m *AdminService) CreateCategory(req *dto.CreateCategory) (*model.ProductCategory, error) {
	ret := _m.Called(req)

	var r0 *model.ProductCategory
	if rf, ok := ret.Get(0).(func(*dto.CreateCategory) *model.ProductCategory); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductCategory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateCategory) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlobalVoucher provides a mock function with given fields: req
func (_m *AdminService) CreateGlobalVoucher(req *dto.CreateGlobalVoucher) (*model.Voucher, error) {
	ret := _m.Called(req)

	var r0 *model.Voucher
	if rf, ok := ret.Get(0).(func(*dto.CreateGlobalVoucher) *model.Voucher); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateGlobalVoucher) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminService(t mockConstructorTestingTNewAdminService) *AdminService {
	mock := &AdminService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
