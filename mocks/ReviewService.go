// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// ReviewService is an autogenerated mock type for the ReviewService type
type ReviewService struct {
	mock.Mock
}

// CreateUpdateReview provides a mock function with given fields: userID, req
func (_m *ReviewService) CreateUpdateReview(userID uint, req *dto.CreateUpdateReview) (*model.Review, error) {
	ret := _m.Called(userID, req)

	var r0 *model.Review
	if rf, ok := ret.Get(0).(func(uint, *dto.CreateUpdateReview) *model.Review); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.CreateUpdateReview) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReviewByProductID provides a mock function with given fields: productID, qp
func (_m *ReviewService) FindReviewByProductID(productID uint, qp *model.ReviewQueryParam) (*dto.GetReviewsRes, error) {
	ret := _m.Called(productID, qp)

	var r0 *dto.GetReviewsRes
	if rf, ok := ret.Get(0).(func(uint, *model.ReviewQueryParam) *dto.GetReviewsRes); ok {
		r0 = rf(productID, qp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetReviewsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *model.ReviewQueryParam) error); ok {
		r1 = rf(productID, qp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReviewByProductIDAndSellerID provides a mock function with given fields: userID, productID
func (_m *ReviewService) FindReviewByProductIDAndSellerID(userID uint, productID uint) (*model.Review, error) {
	ret := _m.Called(userID, productID)

	var r0 *model.Review
	if rf, ok := ret.Get(0).(func(uint, uint) *model.Review); ok {
		r0 = rf(userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserReviewHistory provides a mock function with given fields: userID
func (_m *ReviewService) UserReviewHistory(userID uint) ([]*model.Review, error) {
	ret := _m.Called(userID)

	var r0 []*model.Review
	if rf, ok := ret.Get(0).(func(uint) []*model.Review); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReviewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviewService creates a new instance of ReviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviewService(t mockConstructorTestingTNewReviewService) *ReviewService {
	mock := &ReviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
