// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// ProductVariantService is an autogenerated mock type for the ProductVariantService type
type ProductVariantService struct {
	mock.Mock
}

// FindAllProductVariantByProductID provides a mock function with given fields: productID
func (_m *ProductVariantService) FindAllProductVariantByProductID(productID uint) (*dto.ProductVariantRes, error) {
	ret := _m.Called(productID)

	var r0 *dto.ProductVariantRes
	if rf, ok := ret.Get(0).(func(uint) *dto.ProductVariantRes); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductVariantRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVariantPriceAfterPromotionByProductID provides a mock function with given fields: productID
func (_m *ProductVariantService) GetVariantPriceAfterPromotionByProductID(productID int) (*dto.ProductVariantPriceRes, error) {
	ret := _m.Called(productID)

	var r0 *dto.ProductVariantPriceRes
	if rf, ok := ret.Get(0).(func(int) *dto.ProductVariantPriceRes); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductVariantPriceRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductVariantService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductVariantService creates a new instance of ProductVariantService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductVariantService(t mockConstructorTestingTNewProductVariantService) *ProductVariantService {
	mock := &ProductVariantService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
