// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"

	repository "seadeals-backend/repository"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// AddProductPhoto provides a mock function with given fields: userID, productID, req
func (_m *ProductService) AddProductPhoto(userID uint, productID uint, req *dto.ProductPhotoReq) ([]*model.ProductPhoto, error) {
	ret := _m.Called(userID, productID, req)

	var r0 []*model.ProductPhoto
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.ProductPhotoReq) []*model.ProductPhoto); ok {
		r0 = rf(userID, productID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.ProductPhotoReq) error); ok {
		r1 = rf(userID, productID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddVariantDetails provides a mock function with given fields: userID, productID, req
func (_m *ProductService) AddVariantDetails(userID uint, productID uint, req *dto.AddVariantAndDetails) ([]*model.ProductVariantDetail, error) {
	ret := _m.Called(userID, productID, req)

	var r0 []*model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.AddVariantAndDetails) []*model.ProductVariantDetail); ok {
		r0 = rf(userID, productID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.AddVariantAndDetails) error); ok {
		r1 = rf(userID, productID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSellerProduct provides a mock function with given fields: userID, req
func (_m *ProductService) CreateSellerProduct(userID uint, req *dto.PostCreateProductReq) (*dto.PostCreateProductRes, error) {
	ret := _m.Called(userID, req)

	var r0 *dto.PostCreateProductRes
	if rf, ok := ret.Get(0).(func(uint, *dto.PostCreateProductReq) *dto.PostCreateProductRes); ok {
		r0 = rf(userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PostCreateProductRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.PostCreateProductReq) error); ok {
		r1 = rf(userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: userID, productID
func (_m *ProductService) DeleteProduct(userID uint, productID uint) (*model.Product, error) {
	ret := _m.Called(userID, productID)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(uint, uint) *model.Product); ok {
		r0 = rf(userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductPhoto provides a mock function with given fields: userID, productID, req
func (_m *ProductService) DeleteProductPhoto(userID uint, productID uint, req *dto.DeleteProductPhoto) ([]*model.ProductPhoto, error) {
	ret := _m.Called(userID, productID, req)

	var r0 []*model.ProductPhoto
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.DeleteProductPhoto) []*model.ProductPhoto); ok {
		r0 = rf(userID, productID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.DeleteProductPhoto) error); ok {
		r1 = rf(userID, productID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductVariantDetails provides a mock function with given fields: userID, variantDetailsID, defaultPrice
func (_m *ProductService) DeleteProductVariantDetails(userID uint, variantDetailsID uint, defaultPrice *float64) error {
	ret := _m.Called(userID, variantDetailsID, defaultPrice)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, *float64) error); ok {
		r0 = rf(userID, variantDetailsID, defaultPrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindProductDetailByID provides a mock function with given fields: productID, userID
func (_m *ProductService) FindProductDetailByID(productID uint, userID uint) (*dto.ProductDetailRes, *dto.GetSellerRes, error) {
	ret := _m.Called(productID, userID)

	var r0 *dto.ProductDetailRes
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.ProductDetailRes); ok {
		r0 = rf(productID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductDetailRes)
		}
	}

	var r1 *dto.GetSellerRes
	if rf, ok := ret.Get(1).(func(uint, uint) *dto.GetSellerRes); ok {
		r1 = rf(productID, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.GetSellerRes)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, uint) error); ok {
		r2 = rf(productID, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindSimilarProducts provides a mock function with given fields: productID, query
func (_m *ProductService) FindSimilarProducts(productID uint, query *repository.SearchQuery) ([]*dto.ProductRes, int64, int64, error) {
	ret := _m.Called(productID, query)

	var r0 []*dto.ProductRes
	if rf, ok := ret.Get(0).(func(uint, *repository.SearchQuery) []*dto.ProductRes); ok {
		r0 = rf(productID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProductRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(uint, *repository.SearchQuery) int64); ok {
		r1 = rf(productID, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(uint, *repository.SearchQuery) int64); ok {
		r2 = rf(productID, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(uint, *repository.SearchQuery) error); ok {
		r3 = rf(productID, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProducts provides a mock function with given fields: q
func (_m *ProductService) GetProducts(q *repository.SearchQuery) ([]*dto.ProductRes, int64, int64, error) {
	ret := _m.Called(q)

	var r0 []*dto.ProductRes
	if rf, ok := ret.Get(0).(func(*repository.SearchQuery) []*dto.ProductRes); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProductRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*repository.SearchQuery) int64); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*repository.SearchQuery) int64); ok {
		r2 = rf(q)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*repository.SearchQuery) error); ok {
		r3 = rf(q)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProductsByCategoryID provides a mock function with given fields: query, categoryID
func (_m *ProductService) GetProductsByCategoryID(query *dto.SellerProductSearchQuery, categoryID uint) ([]*dto.ProductRes, int64, int64, error) {
	ret := _m.Called(query, categoryID)

	var r0 []*dto.ProductRes
	if rf, ok := ret.Get(0).(func(*dto.SellerProductSearchQuery, uint) []*dto.ProductRes); ok {
		r0 = rf(query, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProductRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*dto.SellerProductSearchQuery, uint) int64); ok {
		r1 = rf(query, categoryID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*dto.SellerProductSearchQuery, uint) int64); ok {
		r2 = rf(query, categoryID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*dto.SellerProductSearchQuery, uint) error); ok {
		r3 = rf(query, categoryID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProductsBySellerID provides a mock function with given fields: query, sellerID
func (_m *ProductService) GetProductsBySellerID(query *dto.SellerProductSearchQuery, sellerID uint) ([]*dto.ProductRes, int64, int64, error) {
	ret := _m.Called(query, sellerID)

	var r0 []*dto.ProductRes
	if rf, ok := ret.Get(0).(func(*dto.SellerProductSearchQuery, uint) []*dto.ProductRes); ok {
		r0 = rf(query, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProductRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*dto.SellerProductSearchQuery, uint) int64); ok {
		r1 = rf(query, sellerID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*dto.SellerProductSearchQuery, uint) int64); ok {
		r2 = rf(query, sellerID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*dto.SellerProductSearchQuery, uint) error); ok {
		r3 = rf(query, sellerID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProductsByUserIDUnscoped provides a mock function with given fields: query, userID
func (_m *ProductService) GetProductsByUserIDUnscoped(query *dto.SellerProductSearchQuery, userID uint) ([]*dto.GetSellerSummaryProductRes, int64, int64, error) {
	ret := _m.Called(query, userID)

	var r0 []*dto.GetSellerSummaryProductRes
	if rf, ok := ret.Get(0).(func(*dto.SellerProductSearchQuery, uint) []*dto.GetSellerSummaryProductRes); ok {
		r0 = rf(query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.GetSellerSummaryProductRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*dto.SellerProductSearchQuery, uint) int64); ok {
		r1 = rf(query, userID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*dto.SellerProductSearchQuery, uint) int64); ok {
		r2 = rf(query, userID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*dto.SellerProductSearchQuery, uint) error); ok {
		r3 = rf(query, userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SearchRecommendProduct provides a mock function with given fields: q
func (_m *ProductService) SearchRecommendProduct(q *repository.SearchQuery) ([]*dto.ProductRes, int64, int64, error) {
	ret := _m.Called(q)

	var r0 []*dto.ProductRes
	if rf, ok := ret.Get(0).(func(*repository.SearchQuery) []*dto.ProductRes); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ProductRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*repository.SearchQuery) int64); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*repository.SearchQuery) int64); ok {
		r2 = rf(q)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*repository.SearchQuery) error); ok {
		r3 = rf(q)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateProductAndDetails provides a mock function with given fields: userID, productID, req
func (_m *ProductService) UpdateProductAndDetails(userID uint, productID uint, req *dto.PatchProductAndDetailsReq) (*dto.PatchProductAndDetailsRes, error) {
	ret := _m.Called(userID, productID, req)

	var r0 *dto.PatchProductAndDetailsRes
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.PatchProductAndDetailsReq) *dto.PatchProductAndDetailsRes); ok {
		r0 = rf(userID, productID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PatchProductAndDetailsRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.PatchProductAndDetailsReq) error); ok {
		r1 = rf(userID, productID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVariantAndDetails provides a mock function with given fields: userID, variantDetailsID, req
func (_m *ProductService) UpdateVariantAndDetails(userID uint, variantDetailsID uint, req *dto.PatchVariantAndDetails) (*dto.VariantAndDetailsUpdateRes, error) {
	ret := _m.Called(userID, variantDetailsID, req)

	var r0 *dto.VariantAndDetailsUpdateRes
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.PatchVariantAndDetails) *dto.VariantAndDetailsUpdateRes); ok {
		r0 = rf(userID, variantDetailsID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.VariantAndDetailsUpdateRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.PatchVariantAndDetails) error); ok {
		r1 = rf(userID, variantDetailsID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t mockConstructorTestingTNewProductService) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
