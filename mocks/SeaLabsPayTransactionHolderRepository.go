// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// SeaLabsPayTransactionHolderRepository is an autogenerated mock type for the SeaLabsPayTransactionHolderRepository type
type SeaLabsPayTransactionHolderRepository struct {
	mock.Mock
}

// CreateTransactionHolder provides a mock function with given fields: tx, _a1
func (_m *SeaLabsPayTransactionHolderRepository) CreateTransactionHolder(tx *gorm.DB, _a1 *model.SeaLabsPayTransactionHolder) (*model.SeaLabsPayTransactionHolder, error) {
	ret := _m.Called(tx, _a1)

	var r0 *model.SeaLabsPayTransactionHolder
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.SeaLabsPayTransactionHolder) *model.SeaLabsPayTransactionHolder); ok {
		r0 = rf(tx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SeaLabsPayTransactionHolder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.SeaLabsPayTransactionHolder) error); ok {
		r1 = rf(tx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransHolderFromTransactionID provides a mock function with given fields: tx, transactionID
func (_m *SeaLabsPayTransactionHolderRepository) GetTransHolderFromTransactionID(tx *gorm.DB, transactionID uint) (*model.SeaLabsPayTransactionHolder, error) {
	ret := _m.Called(tx, transactionID)

	var r0 *model.SeaLabsPayTransactionHolder
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.SeaLabsPayTransactionHolder); ok {
		r0 = rf(tx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SeaLabsPayTransactionHolder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionHolder provides a mock function with given fields: tx, txnID, status
func (_m *SeaLabsPayTransactionHolderRepository) UpdateTransactionHolder(tx *gorm.DB, txnID uint, status string) (*model.SeaLabsPayTransactionHolder, error) {
	ret := _m.Called(tx, txnID, status)

	var r0 *model.SeaLabsPayTransactionHolder
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) *model.SeaLabsPayTransactionHolder); ok {
		r0 = rf(tx, txnID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SeaLabsPayTransactionHolder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, string) error); ok {
		r1 = rf(tx, txnID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSeaLabsPayTransactionHolderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSeaLabsPayTransactionHolderRepository creates a new instance of SeaLabsPayTransactionHolderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSeaLabsPayTransactionHolderRepository(t mockConstructorTestingTNewSeaLabsPayTransactionHolderRepository) *SeaLabsPayTransactionHolderRepository {
	mock := &SeaLabsPayTransactionHolderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
