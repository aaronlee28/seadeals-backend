// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// VoucherService is an autogenerated mock type for the VoucherService type
type VoucherService struct {
	mock.Mock
}

// CreateVoucher provides a mock function with given fields: req, userID
func (_m *VoucherService) CreateVoucher(req *dto.PostVoucherReq, userID uint) (*dto.GetVoucherRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.GetVoucherRes
	if rf, ok := ret.Get(0).(func(*dto.PostVoucherReq, uint) *dto.GetVoucherRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetVoucherRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PostVoucherReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoucherByID provides a mock function with given fields: id, userID
func (_m *VoucherService) DeleteVoucherByID(id uint, userID uint) (bool, error) {
	ret := _m.Called(id, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVoucherByID provides a mock function with given fields: id
func (_m *VoucherService) FindVoucherByID(id uint) (*dto.GetVoucherRes, error) {
	ret := _m.Called(id)

	var r0 *dto.GetVoucherRes
	if rf, ok := ret.Get(0).(func(uint) *dto.GetVoucherRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetVoucherRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVoucherByUserID provides a mock function with given fields: userID, qp
func (_m *VoucherService) FindVoucherByUserID(userID uint, qp *model.VoucherQueryParam) (*dto.GetVouchersRes, error) {
	ret := _m.Called(userID, qp)

	var r0 *dto.GetVouchersRes
	if rf, ok := ret.Get(0).(func(uint, *model.VoucherQueryParam) *dto.GetVouchersRes); ok {
		r0 = rf(userID, qp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetVouchersRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *model.VoucherQueryParam) error); ok {
		r1 = rf(userID, qp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVoucherDetailByID provides a mock function with given fields: id, userID
func (_m *VoucherService) FindVoucherDetailByID(id uint, userID uint) (*dto.GetVoucherRes, error) {
	ret := _m.Called(id, userID)

	var r0 *dto.GetVoucherRes
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.GetVoucherRes); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetVoucherRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableGlobalVouchers provides a mock function with given fields:
func (_m *VoucherService) GetAvailableGlobalVouchers() ([]*dto.GetVoucherRes, error) {
	ret := _m.Called()

	var r0 []*dto.GetVoucherRes
	if rf, ok := ret.Get(0).(func() []*dto.GetVoucherRes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.GetVoucherRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVouchersBySellerID provides a mock function with given fields: sellerID
func (_m *VoucherService) GetVouchersBySellerID(sellerID uint) ([]*dto.GetVoucherRes, error) {
	ret := _m.Called(sellerID)

	var r0 []*dto.GetVoucherRes
	if rf, ok := ret.Get(0).(func(uint) []*dto.GetVoucherRes); ok {
		r0 = rf(sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.GetVoucherRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoucher provides a mock function with given fields: req, id, userID
func (_m *VoucherService) UpdateVoucher(req *dto.PatchVoucherReq, id uint, userID uint) (*dto.GetVoucherRes, error) {
	ret := _m.Called(req, id, userID)

	var r0 *dto.GetVoucherRes
	if rf, ok := ret.Get(0).(func(*dto.PatchVoucherReq, uint, uint) *dto.GetVoucherRes); ok {
		r0 = rf(req, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetVoucherRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PatchVoucherReq, uint, uint) error); ok {
		r1 = rf(req, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateVoucher provides a mock function with given fields: req
func (_m *VoucherService) ValidateVoucher(req *dto.PostValidateVoucherReq) (*dto.GetVoucherRes, error) {
	ret := _m.Called(req)

	var r0 *dto.GetVoucherRes
	if rf, ok := ret.Get(0).(func(*dto.PostValidateVoucherReq) *dto.GetVoucherRes); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetVoucherRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PostValidateVoucherReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVoucherService interface {
	mock.TestingT
	Cleanup(func())
}

// NewVoucherService creates a new instance of VoucherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVoucherService(t mockConstructorTestingTNewVoucherService) *VoucherService {
	mock := &VoucherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
