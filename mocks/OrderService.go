// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"

	repository "seadeals-backend/repository"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// AcceptRefundRequest provides a mock function with given fields: req, userID
func (_m *OrderService) AcceptRefundRequest(req *dto.RejectAcceptRefundReq, userID uint) (*dto.RejectAcceptRefundRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.RejectAcceptRefundRes
	if rf, ok := ret.Get(0).(func(*dto.RejectAcceptRefundReq, uint) *dto.RejectAcceptRefundRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RejectAcceptRefundRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RejectAcceptRefundReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelOrderBySeller provides a mock function with given fields: orderID, userID
func (_m *OrderService) CancelOrderBySeller(orderID uint, userID uint) (*model.Order, error) {
	ret := _m.Called(orderID, userID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(uint, uint) *model.Order); ok {
		r0 = rf(orderID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(orderID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishOrder provides a mock function with given fields: req, userID
func (_m *OrderService) FinishOrder(req *dto.FinishOrderReq, userID uint) (*model.Order, error) {
	ret := _m.Called(req, userID)

	var r0 *model.Order
	if rf, ok := ret.Get(0).(func(*dto.FinishOrderReq, uint) *model.Order); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.FinishOrderReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailOrderForReceipt provides a mock function with given fields: orderID, userID
func (_m *OrderService) GetDetailOrderForReceipt(orderID uint, userID uint) (*dto.Receipt, error) {
	ret := _m.Called(orderID, userID)

	var r0 *dto.Receipt
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.Receipt); ok {
		r0 = rf(orderID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Receipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(orderID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailOrderForThermal provides a mock function with given fields: orderID, userID
func (_m *OrderService) GetDetailOrderForThermal(orderID uint, userID uint) (*dto.Thermal, error) {
	ret := _m.Called(orderID, userID)

	var r0 *dto.Thermal
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.Thermal); ok {
		r0 = rf(orderID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Thermal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(orderID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: userID, orderID
func (_m *OrderService) GetOrderByID(userID uint, orderID uint) (*dto.OrderListRes, error) {
	ret := _m.Called(userID, orderID)

	var r0 *dto.OrderListRes
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.OrderListRes); ok {
		r0 = rf(userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OrderListRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBySellerID provides a mock function with given fields: userID, query
func (_m *OrderService) GetOrderBySellerID(userID uint, query *repository.OrderQuery) ([]*dto.OrderListRes, int64, int64, error) {
	ret := _m.Called(userID, query)

	var r0 []*dto.OrderListRes
	if rf, ok := ret.Get(0).(func(uint, *repository.OrderQuery) []*dto.OrderListRes); ok {
		r0 = rf(userID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.OrderListRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(uint, *repository.OrderQuery) int64); ok {
		r1 = rf(userID, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(uint, *repository.OrderQuery) int64); ok {
		r2 = rf(userID, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(uint, *repository.OrderQuery) error); ok {
		r3 = rf(userID, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetOrderByUserID provides a mock function with given fields: userID, query
func (_m *OrderService) GetOrderByUserID(userID uint, query *repository.OrderQuery) ([]*dto.OrderListRes, int64, int64, error) {
	ret := _m.Called(userID, query)

	var r0 []*dto.OrderListRes
	if rf, ok := ret.Get(0).(func(uint, *repository.OrderQuery) []*dto.OrderListRes); ok {
		r0 = rf(userID, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.OrderListRes)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(uint, *repository.OrderQuery) int64); ok {
		r1 = rf(userID, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(uint, *repository.OrderQuery) int64); ok {
		r2 = rf(userID, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(uint, *repository.OrderQuery) error); ok {
		r3 = rf(userID, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetTotalPredictedPrice provides a mock function with given fields: req, userID
func (_m *OrderService) GetTotalPredictedPrice(req *dto.PredictedPriceReq, userID uint) (*dto.TotalPredictedPriceRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.TotalPredictedPriceRes
	if rf, ok := ret.Get(0).(func(*dto.PredictedPriceReq, uint) *dto.TotalPredictedPriceRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TotalPredictedPriceRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.PredictedPriceReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectRefundRequest provides a mock function with given fields: req, userID
func (_m *OrderService) RejectRefundRequest(req *dto.RejectAcceptRefundReq, userID uint) (*dto.RejectAcceptRefundRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.RejectAcceptRefundRes
	if rf, ok := ret.Get(0).(func(*dto.RejectAcceptRefundReq, uint) *dto.RejectAcceptRefundRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RejectAcceptRefundRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RejectAcceptRefundReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestRefundByBuyer provides a mock function with given fields: req, userID
func (_m *OrderService) RequestRefundByBuyer(req *dto.CreateComplaintReq, userID uint) (*dto.CreateComplaintRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.CreateComplaintRes
	if rf, ok := ret.Get(0).(func(*dto.CreateComplaintReq, uint) *dto.CreateComplaintRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateComplaintRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateComplaintReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCronJobs provides a mock function with given fields:
func (_m *OrderService) RunCronJobs() {
	_m.Called()
}

type mockConstructorTestingTNewOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderService(t mockConstructorTestingTNewOrderService) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
