// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// SocialGraphRepository is an autogenerated mock type for the SocialGraphRepository type
type SocialGraphRepository struct {
	mock.Mock
}

// FollowToSeller provides a mock function with given fields: tx, userID, sellerID
func (_m *SocialGraphRepository) FollowToSeller(tx *gorm.DB, userID uint, sellerID uint) (*model.SocialGraph, error) {
	ret := _m.Called(tx, userID, sellerID)

	var r0 *model.SocialGraph
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.SocialGraph); ok {
		r0 = rf(tx, userID, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SocialGraph)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, userID, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteUserID provides a mock function with given fields: tx, productID
func (_m *SocialGraphRepository) GetFavoriteUserID(tx *gorm.DB, productID uint) ([]*model.Favorite, error) {
	ret := _m.Called(tx, productID)

	var r0 []*model.Favorite
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.Favorite); ok {
		r0 = rf(tx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Favorite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollowerCountBySellerID provides a mock function with given fields: tx, sellerID
func (_m *SocialGraphRepository) GetFollowerCountBySellerID(tx *gorm.DB, sellerID uint) (int64, error) {
	ret := _m.Called(tx, sellerID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) int64); ok {
		r0 = rf(tx, sellerID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollowerUserID provides a mock function with given fields: tx, sellerID
func (_m *SocialGraphRepository) GetFollowerUserID(tx *gorm.DB, sellerID uint) ([]*model.SocialGraph, error) {
	ret := _m.Called(tx, sellerID)

	var r0 []*model.SocialGraph
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.SocialGraph); ok {
		r0 = rf(tx, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SocialGraph)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, sellerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollowingCountByUserID provides a mock function with given fields: tx, userID
func (_m *SocialGraphRepository) GetFollowingCountByUserID(tx *gorm.DB, userID uint) (int64, error) {
	ret := _m.Called(tx, userID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) int64); ok {
		r0 = rf(tx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSocialGraphRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSocialGraphRepository creates a new instance of SocialGraphRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSocialGraphRepository(t mockConstructorTestingTNewSocialGraphRepository) *SocialGraphRepository {
	mock := &SocialGraphRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
