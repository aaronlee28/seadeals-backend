// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ProductVariantRepository is an autogenerated mock type for the ProductVariantRepository type
type ProductVariantRepository struct {
	mock.Mock
}

// FindAllProductVariantByProductID provides a mock function with given fields: tx, productID
func (_m *ProductVariantRepository) FindAllProductVariantByProductID(tx *gorm.DB, productID uint) ([]*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, productID)

	var r0 []*model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.ProductVariantDetail); ok {
		r0 = rf(tx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductVariantRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductVariantRepository creates a new instance of ProductVariantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductVariantRepository(t mockConstructorTestingTNewProductVariantRepository) *ProductVariantRepository {
	mock := &ProductVariantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
