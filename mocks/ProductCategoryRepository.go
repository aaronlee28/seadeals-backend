// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "seadeals-backend/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ProductCategoryRepository is an autogenerated mock type for the ProductCategoryRepository type
type ProductCategoryRepository struct {
	mock.Mock
}

// FindCategories provides a mock function with given fields: tx, query
func (_m *ProductCategoryRepository) FindCategories(tx *gorm.DB, query *model.CategoryQuery) ([]*model.ProductCategory, int64, int64, error) {
	ret := _m.Called(tx, query)

	var r0 []*model.ProductCategory
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.CategoryQuery) []*model.ProductCategory); ok {
		r0 = rf(tx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductCategory)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.CategoryQuery) int64); ok {
		r1 = rf(tx, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, *model.CategoryQuery) int64); ok {
		r2 = rf(tx, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, *model.CategoryQuery) error); ok {
		r3 = rf(tx, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewProductCategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductCategoryRepository creates a new instance of ProductCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductCategoryRepository(t mockConstructorTestingTNewProductCategoryRepository) *ProductCategoryRepository {
	mock := &ProductCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
