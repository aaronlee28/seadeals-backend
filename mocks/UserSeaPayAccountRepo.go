// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"
)

// UserSeaPayAccountRepo is an autogenerated mock type for the UserSeaPayAccountRepo type
type UserSeaPayAccountRepo struct {
	mock.Mock
}

// GetSeaLabsPayAccountByUserID provides a mock function with given fields: tx, userID
func (_m *UserSeaPayAccountRepo) GetSeaLabsPayAccountByUserID(tx *gorm.DB, userID uint) ([]*model.UserSealabsPayAccount, error) {
	ret := _m.Called(tx, userID)

	var r0 []*model.UserSealabsPayAccount
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.UserSealabsPayAccount); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserSealabsPayAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasExistsSeaLabsPayAccountWith provides a mock function with given fields: tx, userID, accountNumber
func (_m *UserSeaPayAccountRepo) HasExistsSeaLabsPayAccountWith(tx *gorm.DB, userID uint, accountNumber string) (bool, error) {
	ret := _m.Called(tx, userID, accountNumber)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, string) bool); ok {
		r0 = rf(tx, userID, accountNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, string) error); ok {
		r1 = rf(tx, userID, accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSeaLabsPayAccount provides a mock function with given fields: tx, req, userID
func (_m *UserSeaPayAccountRepo) RegisterSeaLabsPayAccount(tx *gorm.DB, req *dto.RegisterSeaLabsPayReq, userID uint) (*model.UserSealabsPayAccount, error) {
	ret := _m.Called(tx, req, userID)

	var r0 *model.UserSealabsPayAccount
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.RegisterSeaLabsPayReq, uint) *model.UserSealabsPayAccount); ok {
		r0 = rf(tx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSealabsPayAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.RegisterSeaLabsPayReq, uint) error); ok {
		r1 = rf(tx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSeaLabsPayAccountToMain provides a mock function with given fields: tx, req, userID
func (_m *UserSeaPayAccountRepo) UpdateSeaLabsPayAccountToMain(tx *gorm.DB, req *dto.UpdateSeaLabsPayToMainReq, userID uint) (*model.UserSealabsPayAccount, error) {
	ret := _m.Called(tx, req, userID)

	var r0 *model.UserSealabsPayAccount
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.UpdateSeaLabsPayToMainReq, uint) *model.UserSealabsPayAccount); ok {
		r0 = rf(tx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSealabsPayAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.UpdateSeaLabsPayToMainReq, uint) error); ok {
		r1 = rf(tx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserSeaPayAccountRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserSeaPayAccountRepo creates a new instance of UserSeaPayAccountRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserSeaPayAccountRepo(t mockConstructorTestingTNewUserSeaPayAccountRepo) *UserSeaPayAccountRepo {
	mock := &UserSeaPayAccountRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
