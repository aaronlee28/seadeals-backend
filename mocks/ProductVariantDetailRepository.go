// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "seadeals-backend/dto"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "seadeals-backend/model"

	repository "seadeals-backend/repository"
)

// ProductVariantDetailRepository is an autogenerated mock type for the ProductVariantDetailRepository type
type ProductVariantDetailRepository struct {
	mock.Mock
}

// AddProductVariantStock provides a mock function with given fields: tx, productVarDetID, amount
func (_m *ProductVariantDetailRepository) AddProductVariantStock(tx *gorm.DB, productVarDetID uint, amount uint) (*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, productVarDetID, amount)

	var r0 *model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.ProductVariantDetail); ok {
		r0 = rf(tx, productVarDetID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, productVarDetID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductVariantDetailByID provides a mock function with given fields: tx, productVarDetID
func (_m *ProductVariantDetailRepository) GetProductVariantDetailByID(tx *gorm.DB, productVarDetID uint) (*model.ProductVariantDetail, error) {
	ret := _m.Called(tx, productVarDetID)

	var r0 *model.ProductVariantDetail
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.ProductVariantDetail); ok {
		r0 = rf(tx, productVarDetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, productVarDetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByCategoryID provides a mock function with given fields: tx, query, sellerID
func (_m *ProductVariantDetailRepository) GetProductsByCategoryID(tx *gorm.DB, query *dto.SellerProductSearchQuery, sellerID uint) ([]*dto.SellerProductsCustomTable, int64, int64, error) {
	ret := _m.Called(tx, query, sellerID)

	var r0 []*dto.SellerProductsCustomTable
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) []*dto.SellerProductsCustomTable); ok {
		r0 = rf(tx, query, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.SellerProductsCustomTable)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) int64); ok {
		r1 = rf(tx, query, sellerID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) int64); ok {
		r2 = rf(tx, query, sellerID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) error); ok {
		r3 = rf(tx, query, sellerID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProductsBySellerID provides a mock function with given fields: tx, query, sellerID
func (_m *ProductVariantDetailRepository) GetProductsBySellerID(tx *gorm.DB, query *dto.SellerProductSearchQuery, sellerID uint) ([]*dto.SellerProductsCustomTable, int64, int64, error) {
	ret := _m.Called(tx, query, sellerID)

	var r0 []*dto.SellerProductsCustomTable
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) []*dto.SellerProductsCustomTable); ok {
		r0 = rf(tx, query, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.SellerProductsCustomTable)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) int64); ok {
		r1 = rf(tx, query, sellerID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) int64); ok {
		r2 = rf(tx, query, sellerID)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) error); ok {
		r3 = rf(tx, query, sellerID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProductsBySellerIDUnscoped provides a mock function with given fields: tx, query, sellerID
func (_m *ProductVariantDetailRepository) GetProductsBySellerIDUnscoped(tx *gorm.DB, query *dto.SellerProductSearchQuery, sellerID uint) ([]*model.Product, int64, error) {
	ret := _m.Called(tx, query, sellerID)

	var r0 []*model.Product
	if rf, ok := ret.Get(0).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) []*model.Product); ok {
		r0 = rf(tx, query, sellerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) int64); ok {
		r1 = rf(tx, query, sellerID)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gorm.DB, *dto.SellerProductSearchQuery, uint) error); ok {
		r2 = rf(tx, query, sellerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchProducts provides a mock function with given fields: tx, query
func (_m *ProductVariantDetailRepository) SearchProducts(tx *gorm.DB, query *repository.SearchQuery) ([]*dto.SellerProductsCustomTable, int64, int64, error) {
	ret := _m.Called(tx, query)

	var r0 []*dto.SellerProductsCustomTable
	if rf, ok := ret.Get(0).(func(*gorm.DB, *repository.SearchQuery) []*dto.SellerProductsCustomTable); ok {
		r0 = rf(tx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.SellerProductsCustomTable)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*gorm.DB, *repository.SearchQuery) int64); ok {
		r1 = rf(tx, query)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(*gorm.DB, *repository.SearchQuery) int64); ok {
		r2 = rf(tx, query)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gorm.DB, *repository.SearchQuery) error); ok {
		r3 = rf(tx, query)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewProductVariantDetailRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductVariantDetailRepository creates a new instance of ProductVariantDetailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductVariantDetailRepository(t mockConstructorTestingTNewProductVariantDetailRepository) *ProductVariantDetailRepository {
	mock := &ProductVariantDetailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
